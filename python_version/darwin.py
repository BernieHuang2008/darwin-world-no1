# Darwin World No.1
from random import choice as random_choice
from random import random, randint
import math

"""
map:
  - 1: Land
  - 2: Sea

A map generated by the RAND() function of EXCEL are below:
"""
ID = 0

map_lst = [[0.5, 0.0, 0.3, 0.3, 0.1, 0.9, 0.3, 0.9, 0.3, 0.4],
           [0.0, 0.4, 0.5, 0.1, 0.6, 0.3, 0.4, 0.1, 0.4, 0.4],
           [0.2, 0.3, 0.3, 0.4, 0.4, 0.5, 0.3, 0.2, 0.0, 0.0],
           [0.0, 0.0, 0.0, 0.0, 0.1, 0.1, 0.0, 0.1, 0.1, 0.1],
           [-0.3, -0.3, -0.2, -0.2, -0.1, -0.2, -0.1, 0.0, -0.2, -0.2],
           [-0.1, -0.3, -0.2, -0.3, -0.4, -0.4, -0.1, 0.0, -0.1, -0.2],
           [-0.1, -0.6, -0.3, -0.7, -0.5, 0.0, -0.3, -0.3, -0.5, -0.4],
           [-1.0, -0.2, -0.6, -0.3, -0.5, -0.8, -0.3, -0.6, -0.2, -0.5],
           [-0.6, -0.9, -0.7, -0.7, -0.9, 0.0, -0.6, -0.2, -0.5, -0.2],
           [-0.5, -0.3, -0.9, -0.9, -0.8, -0.9, -0.1, -0.9, -0.5, -0.2]]

land = [[[] for _ in range(10)] for _ in range(10)]


# print(map_lst)


def get_oxygen(height):
    if height >= 0:  # on the land
        return 1 - height
    else:  # under the water
        return -1 - height


def get_height(pos):
    return map_lst[pos[1]][pos[0]]


class DNA:
    def __init__(self, dna: list):
        """
        DNA:
          - DNA[0]: Swimming ability
          - DNA[1]: Moving ability (on land)
          - DNA[2]: Shell ability
          - DNA[3]: Oxygen ability (if negative, then it's underwater-oxygen ability)
        """
        self.dna = dna
        self.oxygen_requirement = (sum(dna[:3]) / 3) * 0.5 + abs(dna[3]) * 0.05

    @classmethod
    def random(cls):
        return cls([random(), random(), random(), random() * 2 - 1])

    def __str__(self):
        return str(self.dna)

    def __getitem__(self, item):
        return self.dna[item]

    def __len__(self):
        return len(self.dna)


class Life:
    def __init__(self, dna: DNA):
        global ID, land
        ID += 1
        self.dna = dna
        self.oxygen = 1
        self.id = ID
        self.pos = (math.floor(random() * 10), math.floor(random() * 10))
        land[self.pos[1]][self.pos[0]].append(self)

    def action_breathe(self, height):
        # use oxygen
        oxy2 = self.dna.oxygen_requirement
        self.oxygen -= oxy2

        # breathe oxygen
        oxy1 = self.dna[3] * get_oxygen(height)
        self.oxygen = min(1, self.oxygen + oxy1)

        print('  O #{} Breathe {} Oxygen, and Use {} Oxygen, {} in total.'.format(self.id, oxy1, oxy2, oxy1 - oxy2))

        # check if dead
        if self.oxygen <= 0:
            self.action_dead('No Oxygen')

    def action_move(self):
        curr_moving_ability = (self.dna[0] if get_height(self.pos) < 0 else self.dna[1])
        move_or_not = (random() <= curr_moving_ability)
        if move_or_not is True:
            land[self.pos[1]][self.pos[0]].remove(self)
            x = self.pos[0] + randint(-1, 1)
            y = self.pos[1] + randint(-1, 1)
            self.pos = (min(9, max(0, x)), min(9, max(0, y)))  # 0 <= x,y <= 9
            self.oxygen -= 0.05
            print('  M #{} Moved to Pos{}, used 0.05 Oxgen.'.format(self.id, self.pos))
            land[self.pos[1]][self.pos[0]].append(self)
        else:
            print('  M #{} Didn\'t move at all.'.format(self.id))

    def action_dead(self, reason='Unknown Reason'):
        print("@ D #{} Dead because of '{}' at Pos{}.".format(self.id, reason, self.pos))
        land[self.pos[1]][self.pos[0]].remove(self)
        lives.remove(self)

    def move(self):
        self.action_move()
        self.action_breathe(get_height(self.pos))

    def conditions(self):
        print("========== Self Condition of #{} ==========".format(self.id))
        print(' - DNA:', self.dna)
        print(' - Oxygen Requirement:', self.dna.oxygen_requirement)
        print(' · Position:', self.pos)
        print(' · Height:', get_height(self.pos))
        print(' * Oxygen:', self.oxygen)
        print("========== Self Condition ended ==========")

    def mate(self):
        if len(land[self.pos[1]][self.pos[0]]) >= 2:
            if random() < 0.5:  # don't want to mate.
                return
            wife = random_choice(land[self.pos[1]][self.pos[0]])
            while wife is self:
                wife = random_choice(land[self.pos[1]][self.pos[0]])
            wife.breed(self.dna, self.id)
            self.oxygen -= 0.1

    def breed(self, dad, dad_id):
        mom = self.dna
        baby_dna = []

        # Heredity
        for i in range(len(mom)):
            baby_dna.append((mom[i] + dad[i]) / 2)

        # Variation
        v_index = randint(0, len(baby_dna) - 1)
        delta = random() * 0.1 * (1 if random() < 0.5 else -1)
        baby_dna[v_index] += delta
        if v_index == 3:
            limited = (-1, 1)
        else:
            limited = (0, 1)
        baby_dna[v_index] = max(limited[0], min(limited[1], baby_dna[v_index]))

        # generate new life
        lives.append(Life(DNA(baby_dna)))
        print(
            '  X #{} and #{} have mated. They\'ve got a baby #{}. #{} variate at DNA[{}] for {}'.format(self.id, dad_id,
                                                                                                        lives[-1].id,
                                                                                                        lives[-1].id,
                                                                                                        v_index, delta))

        self.oxygen -= 0.1


lives = []
for _ in range(10):
    lives.append(Life(DNA.random()))

roundID = 1
pending_rounds = 0
while 1:
    inp = None
    if pending_rounds > 0:
        pending_rounds -= 1
    else:
        input()
        pending_rounds = 10
    if inp == 'q':
        break
    print('\n' * 3)
    print('&&&&&&&&&& Round {} Start &&&&&&&&&&'.format(roundID))
    for l in lives.copy():
        l.move()
        l.conditions()
        l.mate()
        print()
    print('{} Lives Remaining.'.format(len(lives)))
    print('&&&&&&&&&& Round {} End &&&&&&&&&&'.format(roundID))
    roundID += 1
    print()
    if len(lives) >= 30:
        print("!"*10, "Error", "!"*10)
        print("Too many lives that over loaded the bio-sphere.")
        print("Darwin-World Closed.")
        print("!"*27)
        exit(-1)
